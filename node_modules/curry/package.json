{
  "name": "curry",
  "description": "flexible but simple curry function",
  "version": "1.0.2",
  "homepage": "https://github.com/dominictarr/curry",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/curry.git"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com"
  },
  "contributors": [
    {
      "name": "Hugh FD Jackson",
      "email": "hughfdjackson@googlemail.com"
    }
  ],
  "main": "./curry",
  "devDependencies": {
    "mocha": "1.8.1",
    "browserify": "2.17.2",
    "uglify-js": "2.3.6"
  },
  "testling": {
    "files": "test/*-test.js",
    "browsers": [
      "iexplore/6.0",
      "iexplore/7.0",
      "iexplore/8.0",
      "iexplore/9.0",
      "iexplore/10.0",
      "chrome/4.0",
      "chrome/23.0",
      "firefox/3.0",
      "firefox/17.0",
      "safari/5.0.5",
      "safari/5.1"
    ],
    "harness": "mocha"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test",
    "prepublish": "./node_modules/browserify/bin/cmd.js --standalone curry -e curry.js | ./node_modules/uglify-js/bin/uglifyjs > curry.min.js"
  },
  "readme": "CURRY\n=====\n\nA curry function without anything **too clever**\n_(... because hunger is the finest spice)_\n\n[![browser support](https://ci.testling.com/hughfdjackson/curry.png)](https://ci.testling.com/hughfdjackson/curry)\n\n\n# Why\n\nIf you don't know currying, or aren't sold on it's awesomeness, perhaps [a friendly blog post](http://hughfdjackson.com/javascript/2013/07/06/why-curry-helps/) will help.\n\n\n# Usage\n\n```javascript\nvar curry = require('curry');\n\n//-- creating a curried function is pretty\n//-- straight forward:\nvar add = curry(function(a, b){ return a + b });\n\n//-- it can be called like normal:\nadd(1, 2) //= 3\n\n//-- or, if you miss off any arguments,\n//-- a new funtion that expects all (or some) of\n//-- the remaining arguments will be created:\nvar add1 = add(1);\nadd1(2) //= 3;\n\n//-- curry knows how many arguments a function should take\n//-- by the number of parameters in the parameter list\n\n//-- in this case, a function and two arrays is expected\n//-- (fn, a, b).  zipWith will combine two arrays using a function:\nvar zipWith = curry(function(fn, a, b){\n    return a.map(function(val, i){ return fn(val, b[i]) });\n});\n\n//-- if there are still more arguments required, a curried function\n//-- will always return a new curried function:\nvar zipAdd = zipWith(add);\nvar zipAddWith123 = zipAdd([1, 2, 3]);\n\n//-- both functions are usable as you'd expect at any time:\nzipAdd([1, 2, 3], [1, 2, 3]); //= [2, 4, 6]\nzipAddWith123([5, 6, 7]); //= [6, 8, 10]\n\n//-- the number of arguments a function is expected to provide\n//-- can be discovered by the .length property\nzipWith.length; //= 3\nzipAdd.length; //= 2\nzipAddWith123.length; //= 1\n```\n\n# installation\n\n### node/npm\n\n```bash\nnpm install curry\n```\n\n### amd\n\n```javascript\ndefine(['libs/curry.min'], function(curry){\n    //-- assuming libs/curry.min.js is the downloaded minified version from this repo,\n    //-- curry will be available here\n});\n```\n\n### browser\n\nIf you're not using tools like [browserify](https://github.com/substack/node-browserify) or [require.js](http://requirejs.org), you can load curry globally:\n```html\n<script src=\"libs/curry.min.js\"></script>\n<script>\n    <!-- curry available here -->\n</script>\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dominictarr/curry/issues"
  },
  "_id": "curry@1.0.2",
  "dist": {
    "shasum": "adbfa4e63913fc38b72aeff22f81b9c20fc0df89"
  },
  "_from": "curry@",
  "_resolved": "https://registry.npmjs.org/curry/-/curry-1.0.2.tgz"
}
